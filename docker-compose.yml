version: "3.9"

services:
  frontend:
    container_name: product-frontend
    build: client
    ports:
      - 6060:80
  products:
    container_name: products-service
    build: services/main
    environment:
      - PGUSER=postgres
      - PGPASSWORD=root
      - PGDATABASE=products
      - PGHOST=product-database
      - PGPORT=5432
    ports:
      - 9997:4000
    depends_on:
      - product-database
  warehouse:
    container_name: warehouse-service
    build: services/warehouse
    environment:
      - PGUSER=postgres
      - PGPASSWORD=root
      - PGDATABASE=warehouse
      - PGHOST=warehouse-database
      - PGPORT=5432
    ports:
      - 9998:4000
    depends_on:
      - warehouse-database
  orders:
    container_name: orders-service
    build: services/orders
    environment:
      - PGUSER=postgres
      - PGPASSWORD=root
      - PGDATABASE=orders
      - PGHOST=order-database
      - PGPORT=5432
    ports:
      - 9999:4000
    depends_on:
      - order-database
  # auth:
  #   container_name: products-auth
  gateway:
    container_name: product-gateway
    image: nginx:1.17
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
  product-database:
    container_name: product-database
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_DB=products
    volumes:
      - ./database/product:/var/lib/postgresql/data
    ports:
      - 5001:5432
  warehouse-database:
    container_name: warehouse-database
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_DB=warehouse
    volumes:
      - ./database/warehouse:/var/lib/postgresql/data
    ports:
      - 5002:5432
  order-database:
    container_name: order-database
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_DB=orders
    volumes:
      - ./database/orders:/var/lib/postgresql/data
    ports:
      - 5003:5432
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - broker
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic products.orders --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "
